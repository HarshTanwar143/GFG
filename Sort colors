Sort colors in O(n) time complexity and O(1) space complexity
Harsh_tanwar65


Intuition
first, declare three variable start(s),mid(m) and high(h) . s and m point index 0 and h points the last index . then , traverse the vector and check if the ith element is 0 then swap sth and mth element and increment s and m with 1, else if ith element is 1 then increment m with 1 . else , swap hth element with mth element and decrement h with 1.

Approach
Three pointer approach

Complexity
Time complexity: O(n)
Space complexity: O(1)

Code:
class Solution
{
public:
    void sortColors(vector<int>& nums)
    {
       int s ,m ,h;
       s = m = 0;
       h = nums.size()-1;
       while(m<=h)
       {
           if(nums[m] == 0)
           {
               nums[m] = nums[m]^nums[s];
               nums[s] = nums[m]^nums[s];
               nums[m] = nums[m]^nums[s];
               m++,s++;
           }
           else if (nums[m] == 1)
           {
               m++;
           }
           else
           {
               swap(nums[m],nums[h]);
               h--;
           }
       }
    }
};
